<?php $this->cache['en']['enrol_ldap'] = array (
  'assignrole' => 'Assigning role \'{$a->role_shortname}\' to user \'{$a->user_username}\' into course \'{$a->course_shortname}\' (id {$a->course_id})',
  'assignrolefailed' => 'Failed to assign role \'{$a->role_shortname}\' to user \'{$a->user_username}\' into course \'{$a->course_shortname}\' (id {$a->course_id})
',
  'autocreate' => '<p>Courses can be created automatically if there are enrolments to a course that doesn\'t yet exist in Moodle</p><p>If you are using automatic course creation, it is recommended that you remove the following capabilities: moodle/course:changeidnumber, moodle/course:changeshortname, moodle/course:changefullname and moodle/course:changesummary, from the relevant roles to prevent modifications of the four course fields specified above (ID number, shortname, fullname and summary).</p>',
  'autocreate_key' => 'Auto create',
  'autocreation_settings' => 'Automatic course creation settings',
  'bind_dn' => 'If you want to use a bind user to search users, specify it here. Someting like \'cn=ldapuser,ou=public,o=org\'',
  'bind_dn_key' => 'Bind user distinguished name',
  'bind_pw' => 'Password for the bind user',
  'bind_pw_key' => 'Password',
  'bind_settings' => 'Bind settings',
  'cannotcreatecourse' => 'Cannot create course: missing required data from the LDAP record!',
  'category' => 'The category for auto-created courses',
  'category_key' => 'Category',
  'contexts' => 'LDAP contexts',
  'couldnotfinduser' => 'Could not find user \'{$a}\', skipping
',
  'coursenotexistskip' => 'Course \'{$a}\' does not exist and autocreation disabled, skipping
',
  'course_fullname' => 'Optional: LDAP attribute to get the full name from',
  'course_fullname_key' => 'Full name',
  'course_idnumber' => 'LDAP attribute to get the course ID number from. Usually \'cn\' or \'uid\'.',
  'course_idnumber_key' => 'ID number',
  'course_search_sub' => 'Search group memberships from subcontexts',
  'course_search_sub_key' => 'Search subcontexts',
  'course_settings' => 'Course enrolment settings',
  'course_shortname' => 'Optional: LDAP attribute to get the shortname from',
  'course_shortname_key' => 'Short name',
  'course_summary' => 'Optional: LDAP attribute to get the summary from',
  'course_summary_key' => 'Summary',
  'createcourseextid' => 'CREATE User enrolled to a nonexistant course \'{$a->courseextid}\'',
  'createnotcourseextid' => 'User enrolled to a nonexistant course \'{$a->courseextid}\'',
  'creatingcourse' => 'Creating course \'{$a}\'...',
  'editlock' => 'Lock value',
  'emptyenrolment' => 'Empty enrolment for role \'{$a->role_shortname}\' in course \'{$a->course_shortname}\'
',
  'enrolname' => 'LDAP',
  'enroluser' => 'Enrol user \'{$a->user_username}\' into course \'{$a->course_shortname}\' (id {$a->course_id})',
  'enroluserenable' => 'Enabled enrolment for user \'{$a->user_username}\' in course \'{$a->course_shortname}\' (id {$a->course_id})',
  'explodegroupusertypenotsupported' => 'ldap_explode_group() does not support selected user type: {$a}
',
  'extcourseidinvalid' => 'The course external id is invalid!',
  'extremovedsuspend' => 'Disabled enrolment for user \'{$a->user_username}\' in course \'{$a->course_shortname}\' (id {$a->course_id})',
  'extremovedsuspendnoroles' => 'Disabled enrolment and removed roles for user \'{$a->user_username}\' in course \'{$a->course_shortname}\' (id {$a->course_id})',
  'extremovedunenrol' => 'Unenrol user \'{$a->user_username}\' from course \'{$a->course_shortname}\' (id {$a->course_id})',
  'failed' => 'Failed!
',
  'general_options' => 'General options',
  'group_memberofattribute' => 'Name of the attribute that specifies which groups a given user or group belongs to (e.g., memberOf, groupMembership, etc.)',
  'group_memberofattribute_key' => '\'Member of\' attribute',
  'host_url' => 'Specify LDAP host in URL-form like \'ldap://ldap.myorg.com/\' or \'ldaps://ldap.myorg.com/\'',
  'host_url_key' => 'Host URL',
  'idnumber_attribute' => 'If the group membership contains distinguised names, specify the same attribute you have used for the user \'ID Number\' mapping in the LDAP authentication settings',
  'idnumber_attribute_key' => 'ID number attribute',
  'ldap_encoding' => 'Specify encoding used by LDAP server. Most probably utf-8, MS AD v2 uses default platform encoding such as cp1252, cp1250, etc.',
  'ldap_encoding_key' => 'LDAP encoding',
  'ldap:manage' => 'Manage LDAP enrol instances',
  'memberattribute' => 'LDAP member attribute',
  'memberattribute_isdn' => 'If the group membership contains distinguised names, you need to specify it here. If it does, you also need to configure the remaining settings of this section',
  'memberattribute_isdn_key' => 'Member attribute uses dn',
  'nested_groups' => 'Do you want to use nested groups (groups of groups) for enrolment?',
  'nested_groups_key' => 'Nested groups',
  'nested_groups_settings' => 'Nested groups settings',
  'nosuchrole' => 'No such role: \'{$a}\'
',
  'objectclass' => 'objectClass used to search courses. Usually \'group\' or \'posixGroup\'',
  'objectclass_key' => 'Object class',
  'ok' => 'OK!
',
  'opt_deref' => 'If the group membership contains distinguised names, specify how aliases are handled during search. Select one of the following values: \'No\' (LDAP_DEREF_NEVER) or \'Yes\' (LDAP_DEREF_ALWAYS)',
  'opt_deref_key' => 'Dereference aliases',
  'phpldap_noextension' => '<em>The PHP LDAP module does not seem to be present. Please ensure it is installed and enabled if you want to use this enrolment plugin.</em>',
  'pluginname' => 'LDAP enrolments',
  'pluginname_desc' => '<p>You can use an LDAP server to control your enrolments. It is assumed your LDAP tree contains groups that map to the courses, and that each of those groups/courses will have membership entries to map to students.</p><p>It is assumed that courses are defined as groups in LDAP, with each group having multiple membership fields (<em>member</em> or <em>memberUid</em>) that contain a uniqueidentification of the user.</p><p>To use LDAP enrolment, your users <strong>must</strong> to have a valid  idnumber field. The LDAP groups must have that idnumber in the member fields for a user to be enrolled in the course. This will usually work well if you are already using LDAP Authentication.</p><p>Enrolments will be updated when the user logs in. You can also run a script to keep enrolments in synch. Look in <em>enrol/ldap/cli/sync.php</em>.</p><p>This plugin can also be set to automatically create new courses when new groups appear in LDAP.</p>',
  'pluginnotenabled' => 'Plugin not enabled!',
  'role_mapping' => '<p>For each rol that you want to assign from LDAP, you need to specify the list of contexts where the role courses\'s groups are located. Separate different contexts with \';\'.</p><p>You also need to specify the attribute your LDAP server uses to hold the members of a group. Usually \'member\' or \'memberUid\'</p>',
  'role_mapping_key' => 'Map roles from LDAP ',
  'roles' => 'Role mapping',
  'server_settings' => 'LDAP server settings',
  'synccourserole' => '== Synching course \'{$a->idnumber}\' for role \'{$a->role_shortname}\'
',
  'template' => 'Optional: auto-created courses can copy their settings from a template course',
  'template_key' => 'Template',
  'unassignrole' => 'Unassigning role \'{$a->role_shortname}\' to user \'{$a->user_username}\' from course \'{$a->course_shortname}\' (id {$a->course_id})
',
  'unassignroleid' => 'Unassigning role id \'{$a->role_id}\' to user id \'{$a->user_id}\'
',
  'unassignrolefailed' => 'Failed to unassign role \'{$a->role_shortname}\' to user \'{$a->user_username}\' from course \'{$a->course_shortname}\' (id {$a->course_id})
',
  'updatelocal' => 'Update local data',
  'user_attribute' => 'If the group membership contains distinguised names, specify the attribute used to name/search users. If you are using LDAP authentication, this value should match the attribute specified in the \'ID Number\' mapping in the LDAP authentication plugin',
  'user_attribute_key' => 'ID number attribute',
  'user_contexts' => 'If the group membership contains distinguised names, specify the list of contexts where users are located. Separate different contexts with \';\'. For example: \'ou=users,o=org; ou=others,o=org\'',
  'user_contexts_key' => 'Contexts',
  'user_search_sub' => 'If the group membership contains distinguised names, specify if the search for users is done in subcontexts too',
  'user_search_sub_key' => 'Search subcontexts',
  'user_settings' => 'User lookup settings',
  'user_type' => 'If the group membership contains distinguished names, specify how users are stored in LDAP',
  'user_type_key' => 'User type',
  'version' => 'The version of the LDAP protocol your server is using',
  'version_key' => 'Version',
);